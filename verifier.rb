# Verifier class
class Verifier
# Hashing Function
#
# the string to hash can be generated by interpolating the following string - "#{block_number}|#{previous_hash}|#{transaction_string}|#{timestamp_string}"), using the algorithm:
# Unpack each character via U* (string_to_hash.unpack('U*')), thus converting them to its UTF-8 value
# For each value in the string, x, perform the following calculation ((x**3000) + (x**x) - (3**x)) * (7**x) and store that value
# Sum up all of those values
# Determine that value modulo 65536
# Return the resulting value as a string version of the number in base-16 (hexadecimal)
# See the file hash_walkthrough.txt for detailed steps walking through a simple hash.
# Note that the hash includes the first four elements of the string including the pipe delimiters. It does not include the final pipe delimiter since we haven't added the final data element yet.
# Verify the start of the string input is a nonnegative integer

  def verify_starting_integer(param)
    return true if param.match(/^\d+$/)

    false
  end

  # Verify second pipe
  def vefify_second_pipeset

  end
end
